# engines/advanced_context_engine.py (V2 - Structured Output Powered)
import asyncio
import json
import logging
import uuid
from typing import List, Dict, Any, Optional, Type

from pydantic import BaseModel, Field, ValidationError

# ุงุณุชูุฑุงุฏ ุฎุฏูุฉ LLM ุงููุทูุฑุฉ
from core.llm_service import llm_service

logging.basicConfig(level=logging.INFO, format='%(asctime)s - [ContextEngine] - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- ููุงุฐุฌ Pydantic (ุชุจูู ููุง ููุ ููู ููุชุงุฒุฉ) ---
class EntityContext(BaseModel):
    role_in_text: str = Field(..., description="ุฏูุฑ ุงูููุงู ูู ุงูุณุฑุฏ (ุจุทูุ ููุงู ุฑุฆูุณูุ ุฑูุฒุ ุฅูุฎ).")
    cultural_significance: Optional[str] = Field(None, description="ุงูุฃูููุฉ ุงูุซูุงููุฉ ุฃู ุงูุชุฑุงุซูุฉ ููููุงู.")
    historical_period: Optional[str] = Field(None, description="ุงููุชุฑุฉ ุงูุชุงุฑูุฎูุฉ ุงููุฑุชุจุทุฉ ุจุงูููุงู ุฅู ูุฌุฏุช.")

class Entity(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str = Field(..., description="ุงุณู ุงูููุงู.")
    type: str = Field(..., description="ููุน ุงูููุงู (ุดุฎุตูุฉุ ููุงูุ ุดูุกุ ููููู ูุฌุฑุฏ).")
    description: str = Field(..., description="ูุตู ููุฌุฒ ููููุงู ูุฏูุฑู.")
    importance_score: float = Field(..., ge=0.0, le=10.0, description="ุชูููู ูุฃูููุฉ ุงูููุงู ูู ุงูุณุฑุฏ (0-10).")
    context: EntityContext

class EntityList(BaseModel):
    entities: List[Entity] = Field(description="ูุงุฆูุฉ ุจุฌููุน ุงูููุงูุงุช ุงููุณุชุฎุฑุฌุฉ ูู ุงููุต.")

class Relationship(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    source: str = Field(..., description="ูุนุฑู ุงูููุงู ุงููุตุฏุฑ ููุนูุงูุฉ (ูุฌุจ ุฃู ูููู ูู ุงูููุงูุงุช ุงููุณุชุฎุฑุฌุฉ).")
    target: str = Field(..., description="ูุนุฑู ุงูููุงู ุงููุฏู ููุนูุงูุฉ (ูุฌุจ ุฃู ูููู ูู ุงูููุงูุงุช ุงููุณุชุฎุฑุฌุฉ).")
    relation: str = Field(..., description="ูุตู ุทุจูุนุฉ ุงูุนูุงูุฉ (ูุซุงู: 'ูุญุจ'ุ 'ููุฑู'ุ 'ูุคุฏู ุฅูู'ุ 'ูุณุงุนุฏ').")
    context: Optional[str] = Field(None, description="ุงูุณูุงู ุงูุฐู ุชุธูุฑ ููู ุงูุนูุงูุฉ.")

class RelationshipList(BaseModel):
    relationships: List[Relationship] = Field(description="ูุงุฆูุฉ ุจุฌููุน ุงูุนูุงูุงุช ุงููุณุชุฎุฑุฌุฉ ูู ุงููุต.")

class EmotionalArcPoint(BaseModel):
    timestamp: int = Field(..., ge=0, le=100, description="ููุถุน ูุณุจู ูู ุงููุต (0-100) ุญูุซ ูุญุฏุซ ุงูุชุญูู ุงูุนุงุทูู.")
    emotion: str = Field(..., description="ุงูุนุงุทูุฉ ุงูุณุงุฆุฏุฉ ูู ูุฐู ุงูููุทุฉ (ูุซุงู: ุฃููุ ูุฃุณุ ุบุถุจ).")
    intensity: float = Field(..., ge=0.0, le=1.0, description="ุดุฏุฉ ุงูุนุงุทูุฉ (0.0 ุฅูู 1.0).")
    reasoning: Optional[str] = Field(None, description="ุงูุณุจุจ ุฃู ุงูุญุฏุซ ุงูุฐู ุฃุฏู ุฅูู ูุฐู ุงูุนุงุทูุฉ.")

class EmotionalArc(BaseModel):
    emotional_arc_points: List[EmotionalArcPoint] = Field(description="ูุงุฆูุฉ ุจููุงุท ุงูููุณ ุงูุนุงุทูู ููุณุฑุฏ.")

class KnowledgeBase(BaseModel):
    """
    ูุงุนุฏุฉ ุงููุนุฑูุฉ ุงูุณุฑุฏูุฉ ุงูููุธูุฉ ุงูุชู ุชูุซู ููููุง ุนููููุง ูููุต.
    """
    entities: List[Entity]
    relationship_graph: List[Relationship]
    emotional_arc: List[EmotionalArcPoint]
    thematic_summary: str = Field(description="ููุฎุต ููููุงุถูุน ุงูุฑุฆูุณูุฉ ูู ุงููุต ูู ุฌููุชูู.")

# --- ุงููุญุฑู ุงููุชูุฏู (ููุญุฏููุซ ุจุงููุงูู) ---
class AdvancedContextEngine:
    """
    ูุจูู ูุงุนุฏุฉ ูุนุฑูุฉ ุบููุฉ ููุชุฑุงุจุทุฉ ูู ุงููุตูุต ุนุจุฑ ุงุณุชุฏุนุงุกุงุช ูุชุฎุตุตุฉ
    ูููุซููุฉ ูู LLM ุจุงุณุชุฎุฏุงู ุงููุฎุฑุฌุงุช ุงูููุธูุฉ.
    """
    def __init__(self):
        logger.info("โ AdvancedContextEngine (V2) initialized, powered by Structured Outputs.")

    async def analyze_text(self, text: str) -> Optional[KnowledgeBase]:
        """
        ุงููุธููุฉ ุงูุฑุฆูุณูุฉ ููุชุญููู. ุชููู ุจุชุดุบูู ุฌููุน ููุงู ุงูุชุญููู ุจุงูุชูุงุฒู.
        """
        if not text or len(text.strip()) < 50:
            logger.warning("Input text is too short for meaningful analysis.")
            return None

        logger.info(f"๐ Starting comprehensive analysis for text (length: {len(text)})...")
        
        # ุงุณุชุฏุนุงุก ุฌููุน ุฏูุงู ุงูุชุญููู ุจุงูุชูุงุฒู ูุชุญููู ุฃูุตู ุณุฑุนุฉ
        analysis_tasks = [
            self._extract_entities(text),
            self._analyze_relationships(text),
            self._analyze_emotional_arc(text)
        ]
        
        entities, relationships, emo_arc = await asyncio.gather(*analysis_tasks)
        
        # ุงูุชุญูู ูู ุฃู ุฌููุน ุงูููุงู ุงูุฃุณุงุณูุฉ ูุฌุญุช
        if not all([entities, relationships, emo_arc]):
            logger.error("One or more core analysis tasks failed. Aborting KnowledgeBase creation.")
            return None

        # [ุฌุฏูุฏ] ุงุณุชุฎูุงุต ููุฎุต ุงูููุงุถูุน
        thematic_summary = await self._summarize_themes(text)
        
        # ุจูุงุก ูุงุนุฏุฉ ุงููุนุฑูุฉ ุงูููุงุฆูุฉ ูุงูุชุญูู ูู ุตุญุชูุง
        try:
            kb = KnowledgeBase(
                entities=entities.entities,
                relationship_graph=relationships.relationships,
                emotional_arc=emo_arc.emotional_arc_points,
                thematic_summary=thematic_summary
            )
            logger.info(f"โ Analysis complete. KnowledgeBase created with {len(kb.entities)} entities and {len(kb.relationship_graph)} relationships.")
            return kb
        except ValidationError as e:
            logger.error(f"Failed to assemble final KnowledgeBase: {e}")
            return None

    def _build_prompt(self, task_description: str, text_to_analyze: str) -> str:
        """ุฏุงูุฉ ูุณุงุนุฏุฉ ููุญุฏุฉ ูุจูุงุก ุงูููุฌูุงุช ุจุดูู ูุธูู."""
        return f"""
ูููุชู: ุฃูุช ูุญูู ุณุฑุฏู ุฎุจูุฑ ูุงุฆู ุงูุฐูุงุก. ูู ุจุชุญููู ุงููุต ุงูุชุงูู ุจุฏูุฉ.

**ูุตู ุงููููุฉ ุงููุทููุจุฉ:**
{task_description}

**ุงููุต ููุชุญููู:**
---
{text_to_analyze}
---

ุฃุฑุฌุน ุฑุฏู **ุญุตุฑููุง** ุจุงูุชูุณูู ุงููุญุฏุฏ ูุณุจููุง. ูุง ุชูู ุจุฅุถุงูุฉ ุฃู ูุต ุฃู ุชุนูููุงุช ุฎุงุฑุฌ ุงูุจููุฉ ุงููุทููุจุฉ.
"""

    async def _extract_entities(self, text: str) -> Optional[EntityList]:
        prompt = self._build_prompt(
            task_description="ุงุณุชุฎุฑุฌ ุฌููุน ุงูููุงูุงุช ุงููุงูุฉ (ุดุฎุตูุงุชุ ุฃูุงููุ ููุงูููุ ุฑููุฒ) ูู ุงููุต. ุญุฏุฏ ุฏูุฑ ูู ููุงู ูููู ุฃูููุชู ูู ุงูุณุฑุฏ ูู 0 ุฅูู 10.",
            text_to_analyze=text
        )
        return await llm_service.generate_structured_response(prompt, EntityList)

    async def _analyze_relationships(self, text: str) -> Optional[RelationshipList]:
        prompt = self._build_prompt(
            task_description="ุญูู ุงูุนูุงูุงุช ุงูุณุจุจูุฉ ูุงูููุณูุฉ ุจูู ุงูููุงูุงุช ุงูุฑุฆูุณูุฉ ูู ุงููุต. ุญุฏุฏ ูุง ูู ุงูููุงู ุงูุฐู ูุคุซุฑ ุนูู ููุงู ุขุฎุฑ ูููู.",
            text_to_analyze=text
        )
        return await llm_service.generate_structured_response(prompt, RelationshipList)

    async def _analyze_emotional_arc(self, text: str) -> Optional[EmotionalArc]:
        prompt = self._build_prompt(
            task_description="ุงุฑุณู ุงูููุณ ุงูุนุงุทูู ููุณุฑุฏ. ุญุฏุฏ ููุงุท ุงูุชุญูู ุงูุนุงุทูู ุงูุฑุฆูุณูุฉ (ูู 0 ุฅูู 100)ุ ูููุน ุงูุนุงุทูุฉุ ูุดุฏุชูุง (ูู 0.0 ุฅูู 1.0) ูุน ุฐูุฑ ุงูุณุจุจ.",
            text_to_analyze=text
        )
        return await llm_service.generate_structured_response(prompt, EmotionalArc)

    async def _summarize_themes(self, text: str) -> str:
        """[ุฌุฏูุฏ] ูุณุชุฎูุต ุงูููุงุถูุน ุงูุฑุฆูุณูุฉ ููุต ุนุงุฏู."""
        prompt = self._build_prompt(
            task_description="ูุฎุต ุงูููุงุถูุน ูุงูุฃููุงุฑ ุงูุฑุฆูุณูุฉ ุงูุชู ููุงูุดูุง ูุฐุง ุงููุต ูู ุฌููุชูู ููุท.",
            text_to_analyze=text
        )
        # ููุงุ ุงูุฑุฏ ูู ูุต ุจุณูุท ูููุณ JSON
        summary = await llm_service.generate_text_response(prompt, temperature=0.3)
        return summary

# --- ูุณู ุงูุงุฎุชุจุงุฑ (ูุจูู ููุง ูู ููุชุฃูุฏ ูู ุฃู ุงูุชุนุฏููุงุช ุชุนูู) ---
async def main_test():
    # ... ูููู ุงุณุชุฎุฏุงู ููุณ ูุต ุงูุงุฎุชุจุงุฑ ุงูุณุงุจู ...
    pass

if __name__ == "__main__":
    # asyncio.run(main_test())
    pass
