# agents/chapter_composer_agent.py (ุงููุณุฎุฉ ุงูููุนููุฉ)

import logging
import json
from typing import Dict, Any, Optional, List

# --- ุงูุงุณุชูุฑุงุฏุงุช ุงููุญุฏุซุฉ ---
from .base_agent import BaseAgent
from core.llm_service import llm_service             # <-- ุงูุฎุฏูุฉ ุงูุญููููุฉ
from engines.sensory_engine import sensory_engine      # <-- ูุญุฑู ุงูุฐุงูุฑุฉ ุงูุญุณูุฉ
# ุงุณุชูุฑุงุฏ ููุงุฐุฌ ุงูุจูุงูุงุช ูู ููุงููุง ุงูุตุญูุญ
try:
    # ูุญุงููุฉ ุงูุงุณุชูุฑุงุฏ ูู ุงููุณุงุฑ ุงููุชููุน ูู ุงููููู ุงููุงูู
    from data_models.story_elements import ChapterOutline
except ImportError:
    # ุงุณุชูุฑุงุฏ ุจุฏูู ููุงุฎุชุจุงุฑ ุงููุณุชูู
    from agents.blueprint_architect_agent import ChapterOutline

logger = logging.getLogger(__name__)

class ChapterComposerAgent(BaseAgent):
    """
    ูููู ูุชุฎุตุต ูู ูุชุงุจุฉ ูุตูู ุงูุฑูุงูุงุช ุจูุงุกู ุนูู ูุฎุทุทุงุช ููุตูุฉุ
    ูุนุฒุฒุฉ ุจุงูุฐุงูุฑุฉ ุงูุชุฌุฑูุจูุฉ ุงูุญุณูุฉ ูุจุงุณุชุฎุฏุงู ุฎุฏูุฉ LLM ุญููููุฉ.
    """
    def __init__(self, agent_id: Optional[str] = None):
        super().__init__(
            agent_id=agent_id or "chapter_composer_agent",
            name="ูุคูู ุงููุตูู ุงููุงูุฑ",
            description="ููุชุจ ูุตููุงู ุฑูุงุฆูุฉ ุนูููุฉ ุจุงุณุชุฎุฏุงู ุฎุทุท ููุตูุฉ ูุฐุงูุฑุฉ ุญุณูุฉ."
        )
        # ูู ูุนุฏ ุจุญุงุฌุฉ ุฅูู llm_service ูู ุงูุชููุฆุฉ
        self.style_profile = {
            "sensory_detail": True,
            "symbolism": True,
            "internal_monologue": True,
        }
        logger.info("ChapterComposerAgent initialized and connected to the live LLM service.")

    async def write_chapter(self, context: Dict[str, Any], feedback: Optional[List[str]] = None) -> Dict[str, Any]:
        """
        ุงููุธููุฉ ุงูุฑุฆูุณูุฉ: ุชูุชุจ ูุตููุง ูุงููุงู.
        'context' ูุฌุจ ุฃู ูุญุชูู ุนูู ูุงุฆู 'chapter_outline'.
        """
        chapter_outline = context.get("chapter_outline")
        if not isinstance(chapter_outline, ChapterOutline):
            raise TypeError("A 'ChapterOutline' object is required in the context.")
            
        logger.info(f"Composing chapter: '{chapter_outline.title}'...")

        # --- ุงูุฎุทูุฉ 1: ุจูุงุก Prompt ุฐูู ูููุตู ููุนุฒุฒ ---
        prompt = self._build_chapter_prompt(chapter_outline, feedback)
        
        # --- ุงูุฎุทูุฉ 2: ุงุณุชุฏุนุงุก LLM ุงูุญูููู ูุชูููุฏ ูุญุชูู ุงููุตู ---
        response_data = await llm_service.generate_json_response(prompt, temperature=0.7)
        
        # --- ุงูุฎุทูุฉ 3: ุชุญููู ูุชูุธูู ุงููุฎุฑุฌุงุช ---
        if "error" in response_data:
            logger.error(f"LLM call failed for chapter composition. Details: {response_data.get('details')}")
            return {"status": "error", "message": "Failed to get chapter content from LLM.", "raw": response_data}

        # ุงูุฑุฏ ูู llm_service ูู ุจุงููุนู JSONุ ูุฐุง ูุง ุฏุงุนู ูู json.loads
        # ูุชููุน ุฃู ูููู ุงูุฑุฏ ูุทุงุจููุง ูููุฎุทุท ุงูุฐู ุทูุจูุงู ูู ุงูู prompt
        chapter_content = response_data

        try:
            # ุฏูุฌ ูุนูููุงุช ุงููุฎุทุท ูุน ุงููุชูุฌุฉ
            chapter_content['title'] = chapter_outline.title
            chapter_content['chapter_number'] = int(re.search(r'\d+', chapter_outline.title).group())
            
            logger.info(f"Successfully composed and parsed chapter '{chapter_outline.title}'.")
            # ุชุบููู ุงููุชูุฌุฉ ูุชุชูุงูู ูุน RefinementService
            return {"status": "success", "content": chapter_content} 
        except (KeyError, TypeError, AttributeError) as e:
            logger.error(f"Error processing chapter data: {e}. Received data: {chapter_content}")
            return {"status": "error", "message": "LLM response structure is invalid.", "raw": chapter_content}

    def _build_chapter_prompt(self, outline: ChapterOutline, feedback: Optional[List[str]] = None) -> str:
        """
        ูุจูู Prompt ููุตูุงูุ ูุนุฒุฒูุง ุจุงูุชูุซููุงุช ุงูุญุณูุฉ ูููุงุญุธุงุช ุงููุงูุฏ.
        ูุญุณู ูู Gemini API.
        """
        key_events_str = "\n- ".join(outline.key_events)
        character_arcs_str = "\n- ".join([f"{name}: {arc}" for name, arc in outline.character_arcs.items()])

        feedback_section = ""
        if feedback:
            feedback_str = "\n- ".join(feedback)
            feedback_section = f"""
**ููุงุญุธุงุช ูู ุงููุฑุงุฌุนุฉ ุงูุณุงุจูุฉ (ูุฌุจ ุชุทุจูููุง ุจุฏูุฉ):**
- {feedback_str}
"""
        # ุงุณุชุฎุฏุงู ูุญุฑู ุงูุฐุงูุฑุฉ ุงูุญุณูุฉ
        emotional_focus = outline.emotional_focus
        sensory_data = sensory_engine.get_sensory_representation(emotional_focus)
        
        sensory_instructions = ""
        if sensory_data:
            senses_str = "\n- ".join(sensory_data.get("senses", []))
            behaviors_str = "\n- ".join(sensory_data.get("behaviors", []))
            metaphors_str = "\n- ".join(sensory_data.get("metaphors", []))
            
            sensory_instructions = f"""
**ุฅุฑุดุงุฏุงุช ุญุณูุฉ (Show, Don't Tell):** ููุชุนุจูุฑ ุนู ุดุนูุฑ '{emotional_focus}'ุ ูุง ุชูู "ุดุนุฑ ุจู{emotional_focus}" ูุจุงุดุฑุฉุ ุจู ุฃุธูุฑู ูู ุฎูุงู:
*   **ุงููุตู ุงูุญุณู (ุงุณุชููู ูู ูุฐู ุงูุตูุฑ):**
    - {senses_str}
*   **ุงูุณููููุงุช (ุงุฌุนู ุงูุดุฎุตูุฉ ุชุชุตุฑู ููุฐุง):**
    - {behaviors_str}
*   **ุงูุงุณุชุนุงุฑุงุช (ุงุณุชุฎุฏู ุชุดุจููุงุช ูููุฉ ููุฐู):**
    - {metaphors_str}
"""
        # --- ุจูุงุก ุงูู Prompt ุงูููุงุฆู ---
        return f"""
ูููุชู: ุฃูุช ุฑูุงุฆู ุนุฑุจู ูุญุชุฑู ูุฎุจูุฑ ูู ุฃุณููุจ ุงููุชุงุจุฉ ุงูุฃุฏุจู ุงูุนููู ูุงููุคุซุฑ. ุงูุชุจ ุงููุตู ุงูุชุงูู ูู ุงูุฑูุงูุฉ ุจุฏูุฉ ูุฅุจุฏุงุนุ ุจูุงุกู ุนูู ุงูููุงุตูุงุช ุงูุชุงููุฉ.
ูุฌุจ ุฃู ูููู ุฑุฏู **ุญุตุฑููุง** ุจุชูุณูู JSON ุตุงูุญุ ุจุฏูู ุฃู ูุต ุชูููุฏู ุฃู ููุงุญุธุงุช ุฅุถุงููุฉ.

**ููุงุตูุงุช ุงููุตู ุงููุทููุจ:**
- **ุนููุงู ุงููุตู:** {outline.title}
- **ููุฎุต ุงููุตู:** {outline.summary}
- **ุงูุชุฑููุฒ ุงูุนุงุทูู ุงูุฃุณุงุณู:** {outline.emotional_focus}
- **ุงูุฃุญุฏุงุซ ุงูุฑุฆูุณูุฉ ุงูุชู ูุฌุจ ุฃู ุชูุน:**
  - {key_events_str}
- **ุชุทูุฑ ุงูุดุฎุตูุงุช ูู ูุฐุง ุงููุตู:**
  - {character_arcs_str}
{feedback_section}
{sensory_instructions}

**ุชุนูููุงุช ุงููุชุงุจุฉ ุงูููุงุฆูุฉ:**
1.  ุงุจุฏุฃ ุงููุตู ุจูุดูุฏ ููู ูุฌุฐุงุจ ูุบูุฑ ุงููุงุฑุฆ ูู ุงูุฃุฌูุงุก ุงูุญุณูุฉ.
2.  ุชุฃูุฏ ูู ุชุบุทูุฉ ุฌููุน ุงูุฃุญุฏุงุซ ุงูุฑุฆูุณูุฉ ูุชุทูุฑุงุช ุงูุดุฎุตูุงุช ุงููุฐููุฑุฉ.
3.  ุฃุธูุฑ ูุดุงุนุฑ ุงูุดุฎุตูุงุช ูู ุฎูุงู ุฃูุนุงููุง ูุญูุงุฑุงุชูุง ุงูุฏุงุฎููุฉุ ูููุณ ููุท ูู ุฎูุงู ุงูุณุฑุฏ ุงููุจุงุดุฑ.
4.  ุงููู ุงููุตู ุจุทุฑููุฉ ูุดููุฉ ุชุซูุฑ ูุถูู ุงููุงุฑุฆ ูููุตู ุงูุชุงูู.
5.  ุงูุชุจ ุจุฃุณููุจ ุฃุฏุจู ุบูู ููุคุซุฑ.

**ูุฎุทุท JSON ุงููุทููุจ (Schema):**
{{
  "chapter_content": "string // ุงููุญุชูู ุงููุงูู ูููุตู ููุต ูุงุญุฏ ูุชุฏูู.",
  "word_count": "integer // ุงูุนุฏุฏ ุงููุนูู ูููููุงุช ูู ุงููุญุชูู.",
  "quality_score": "float // ุชููููู ุงูุฐุงุชู ูุฌูุฏุฉ ุงููุตู ุงูุฐู ูุชุจุชู (ูู 0.0 ุฅูู 10.0).",
  "notes": "string // ููุงุญุธุฉ ูุตูุฑุฉ ุญูู ููููุฉ ุชุทุจูู ุงูุฅุฑุดุงุฏุงุช ุงูุญุณูุฉ ุฃู ุฃู ุชุญุฏ ูุงุฌูุชู."
}}
"""

# --- ูุณู ุงูุงุฎุชุจุงุฑ ุงููุญุฏูุซ ---
async def main_test():
    import os
    import re
    from dotenv import load_dotenv

    load_dotenv()
    if not os.getenv("GEMINI_API_KEY"):
        print("โ ุฎุทุฃ: ูุชุบูุฑ ุงูุจูุฆุฉ GEMINI_API_KEY ุบูุฑ ููุฌูุฏ. ูุฑุฌู ุฅุถุงูุชู ูู ููู .env")
        return

    # 1. ูุญุงูุงุฉ ูุฎุทุท ูุตู
    sample_chapter_outline = ChapterOutline(
        title="ุงููุตู 1: ุงูุฑุณุงูุฉ ุงูุบุงูุถุฉ",
        summary="ูุฌุฏ ุงูุจุทู 'ุนูู' ุฑุณุงูุฉ ูุฏููุฉ ูู ุฌุฏู ูู ุงููุงูุฑุฉุ ููุง ูุทูู ุดุฑุงุฑุฉ ุงูุฃุญุฏุงุซ ุงูุชู ุชุฏูุนู ููุจุญุซ ุนู ูุงุถูู.",
        emotional_focus="ุงูุบุฑุจุฉ", 
        key_events=["ุนูู ูุฌุฏ ุงูุฑุณุงูุฉ ูู ุตูุฏูู ุฎุดุจู ูุฏูู.", "ุนูู ููุฑุฑ ูู ุดูุฑุฉ ุงูุฑุณุงูุฉ ูููุง ููู ุงูุฃูุฑ."],
        character_arcs={"ุนูู": "ููุชูู ูู ุญุงูุฉ ุงูุฑููุฏ ูุงูุถูุงุน ุฅูู ุงูุชูุงู ูุฏู ุฌุฏูุฏ ููุญููู ุจุงููุฎุงุทุฑ."}
    )
    
    composer_agent = ChapterComposerAgent()
    
    print(f"--- ๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุชุงุจุฉ ุงููุตู '{sample_chapter_outline.title}' ูุน ุงุชุตุงู LLM ุญูููู... ---")
    
    result = await composer_agent.write_chapter(context={"chapter_outline": sample_chapter_outline})
    
    if result.get("status") == "success":
        print("\n--- โ ุงููุตู ุชู ุฅูุชุงุฌู ุจูุฌุงุญ ---")
        final_content = result.get("content", {})
        print(json.dumps(final_content, indent=2, ensure_ascii=False))
        # print("\n--- ูุญุชูู ุงููุตู ---")
        # print(final_content.get("chapter_content"))
    else:
        print("\n--- โ ูุดู ุฅูุชุงุฌ ุงููุตู ---")
        print(json.dumps(result, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    asyncio.run(main_test())
