# agents/literary_critic_agent.py (ุงููุณุฎุฉ ุงูููุนููุฉ)

import asyncio
import logging
import json
from typing import Dict, Any, List, Optional, Tuple

# --- ุงูุงุณุชูุฑุงุฏุงุช ุงููุญุฏุซุฉ ---
from .base_agent import BaseAgent, AgentState
from core.llm_service import llm_service
# ุงูุฃุฏูุงุช ุงููุณุงุนุฏุฉ ูููู ุชูุนูููุง ูุงุญููุง ุฅุฐุง ูุงูุช ูุทููุจุฉ
# from ..tools.text_processing_tools import TextProcessor
# from ..tools.analysis_tools import LiteraryAnalyzer, StyleAnalyzer

logger = logging.getLogger(__name__)

# Enum classes can be moved to a shared data_models file later
class CriticismLevel:
    GENTLE = "ูุทูู"
    CONSTRUCTIVE = "ุจูุงุก"
    DETAILED = "ููุตู"

class LiteraryCriticAgent(BaseAgent):
    """
    ูููู ุงูุชุญุฑูุฑ ูุงูููุฏ ุงูุฃุฏุจู ุงููุชุฎุตุต.
    ูููู ุจุชูููู ุฃููุงุน ูุฎุชููุฉ ูู ุงููุญุชูู ุงูุฅุจุฏุงุนู ูุชูุฏูู ููุงุญุธุงุช ุจูุงุกุฉ.
    """
    
    def __init__(self, agent_id: Optional[str] = None):
        super().__init__(
            agent_id=agent_id or "literary_critic_agent",
            name="ุงููุงูุฏ ุงูุฃุฏุจู",
            description="ููุฏู ููุฏูุง ุฃุฏุจููุง ุฏููููุง ูุจูุงุกู ูููุตูุต ูุงูุฃููุงุฑ ูุงููุฎุทุทุงุช."
        )
        self.criticism_criteria = {
            "idea": ["originality", "feasibility", "engagement_potential", "depth"],
            "blueprint": ["coherence", "pacing", "character_arc_clarity", "plot_strength"],
            "chapter": ["prose_quality", "emotional_impact", "dialogue_realism", "flow"]
        }
        logger.info("LiteraryCriticAgent initialized and connected to the live LLM service.")

    # --- ุงูุฏูุงู ุงูุนุงูุฉ ููุงุฌูุฉ ุงูููุฏ ---
    
    def review_idea(self, idea_content: Dict[str, Any]) -> Dict[str, Any]:
        """
        ูุฑุงุฌุน ููุฑุฉ ูุตุฉ ููุนุทู ุชูููููุง ูููุงุญุธุงุช.
        (ุชู ุชูููููุง ูู `idea_critic_agent.py` ุงูุฃุตูู)
        """
        logger.info(f"Critiquing idea: '{idea_content.get('premise', 'N/A')}'")
        issues: List[str] = []
        score = 10.0

        premise = idea_content.get("premise", "")
        if "ุชุงุฑูุฎ ูุฒูู" in premise or "ุงูุชุดุงู ุณุฑ" in premise:
            score -= 2.0
            issues.append("ุงูููุฑุฉ ุชุญุชูู ุนูู ุนูุงุตุฑ ุดุงุฆุนุฉ (ูุซู ุงูุชุงุฑูุฎ ุงููุฒูู). ุญุงูู ุฅูุฌุงุฏ ุฒุงููุฉ ุฌุฏูุฏุฉ.")
        if len(premise.split()) < 10:
            score -= 1.5
            issues.append("ุงูููุฑุฉ ุงูุฃุณุงุณูุฉ ููุฌุฒุฉ ุฌุฏูุง ูุชุญุชุงุฌ ุฅูู ุชูุงุตูู ุฃูุซุฑ ูุชุญุฏูุฏ ุฅููุงููุฉ ุชุทููุฑูุง.")
        if "ููุธูุฉ ุณุฑูุฉ" not in premise and "ูุทุงุฑุฏ" not in premise:
            score -= 1.0
            issues.append("ุงูููุฑุฉ ุชูุชูุฑ ุฅูู ุนูุตุฑ ุตุฑุงุน ุฃู ุชุดููู ูุงุถุญ ูุฌุฐุจ ุงููุงุฑุฆ.")

        return {
            "overall_score": max(min(score, 10.0), 0.0),
            "issues": issues, # ุณูุชู ุงุณุชุฎุฏุงููุง ูู feedback
        }
        
    def review_blueprint(self, blueprint_content: Dict[str, Any]) -> Dict[str, Any]:
        """
        ูุฑุงุฌุน ูุฎุทุท ูุตุฉ (StoryBlueprint) ููุนุทู ุชูููููุง.
        (ุชู ุชูููููุง ูู `blueprint_critic_agent.py` ุงูุฃุตูู)
        """
        logger.info(f"Critiquing blueprint for: '{blueprint_content.get('introduction', '')[:30]}...'")
        issues: List[str] = []
        score = 10.0

        if not blueprint_content.get("introduction") or len(blueprint_content.get("introduction", "").split()) < 15:
            issues.append("ุงูููุฏูุฉ ูุตูุฑุฉ ุฌุฏูุง ุฃู ุณุทุญูุฉ.")
            score -= 1.5
        if len(blueprint_content.get("chapters", [])) < 3:
            issues.append("ุนุฏุฏ ุงููุตูู ูููู ุฌุฏูุง (ุฃูู ูู 3).")
            score -= 2.0
        
        # ูููู ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงููุญูุตุงุช ููุง

        return {
            "overall_score": score,
            "issues": issues,
        }

    async def review_chapter(self, chapter_content: Dict[str, Any]) -> Dict[str, Any]:
        """
        ูุฑุงุฌุนุฉ ุดุงููุฉ ููุตู ููุชูุจ. ุชุณุชุฎุฏู ุงูู LLM ูุชูููู ูุชุนุฏุฏ ุงูุฃุจุนุงุฏ.
        """
        logger.info(f"Performing comprehensive critique on chapter: '{chapter_content.get('title', 'Untitled')}'")
        text_to_review = chapter_content.get("chapter_content", "")
        if not text_to_review:
            return {"overall_score": 0.0, "issues": ["ุงููุญุชูู ูุงุฑุบ."]}

        prompt = self._build_critique_prompt(
            text_to_review,
            context=f"ูุฐุง ุงููุตู ุจุนููุงู '{chapter_content.get('title')}' ูููุฏู ุฅูู ุฅูุตุงู ุดุนูุฑ ุจู'{chapter_content.get('emotional_focus', 'N/A')}'."
        )
        
        response = await llm_service.generate_json_response(prompt, temperature=0.4)

        if "error" in response:
            logger.error(f"LLM critique failed: {response.get('details')}")
            # ูู ุญุงูุฉ ุงููุดูุ ูุฑุฌุน ุชูููููุง ุงูุชุฑุงุถููุง
            return {"overall_score": 5.0, "issues": ["ูุดู ุงููุงูุฏ ุงูุขูู ูู ุชูููู ุงููุต."]}
        
        return response

    # --- ุฏุงูุฉ ุจูุงุก ุงูู Prompt ---

    def _build_critique_prompt(self, text_to_review: str, context: str) -> str:
        """
        ูุจูู prompt ููุตูุงู ููููู ุงูู LLM ุจุฏูุฑ ุงููุงูุฏ ุงูุฃุฏุจู.
        """
        return f"""
ูููุชู: ุฃูุช ูุงูุฏ ุฃุฏุจู ุนุฑุจู ูุญุชุฑู ูุฎุจูุฑ. ูู ุจุชูููู ุงููุต ุงูุชุงูู ุจุฏูุฉ ูููุถูุนูุฉ.
**ุณูุงู ุงููุต:** {context}

**ุงููุต ูููุฑุงุฌุนุฉ:**
---
{text_to_review}
---

**ุชุนูููุงุช ุงูููุฏ:**
1.  ุงูุฑุฃ ุงููุต ุจุนูุงูุฉ.
2.  ูู ุจุชูููู ุงููุต ุจูุงุกู ุนูู ุงููุนุงููุฑ ุงูุชุงููุฉุ ูุน ุฅุนุทุงุก ูู ูุนูุงุฑ ุฏุฑุฌุฉ ูู 1 ุฅูู 10.
3.  ุงูุชุจ ููุงุท ุงูููุฉ ุงูุฑุฆูุณูุฉ (2-3 ููุงุท).
4.  ุงูุชุจ ุฃูู ููุงุท ุงูุถุนู ุงูุชู ุชุญุชุงุฌ ุฅูู ุชุญุณูู (2-3 ููุงุท)ุ ูุงุฌุนููุง ููุงุญุธุงุช ูุงุจูุฉ ููุชูููุฐ.
5.  ุงุญุณุจ ุฏุฑุฌุฉ ุฅุฌูุงููุฉ (overall_score) ููุชูุณุท ูุฏุฑุฌุงุช ุงููุนุงููุฑ.

ุฃุฑุฌุน ุฑุฏู **ุญุตุฑููุง** ุจุชูุณูู JSON ุตุงูุญ. ูุฌุจ ุฃู ูุชุจุน ุงูุฑุฏ ุงููุฎุทุท ุงูุชุงูู ุชูุงููุง:
{{
  "scores": {{
    "prose_quality": "float // ุฌูุฏุฉ ุงููุซุฑ ูุงููุบุฉ ูุงูุฃุณููุจ.",
    "emotional_impact": "float // ูุฏู ูุฏุฑุฉ ุงููุต ุนูู ุฅุซุงุฑุฉ ุงููุดุงุนุฑ ูุชุญููู ุงูุชุฑููุฒ ุงูุนุงุทูู ุงููุทููุจ.",
    "plot_progression": "float // ูุฏู ูุณุงููุฉ ุงููุต ูู ุฏูุน ุฃุญุฏุงุซ ุงููุตุฉ ุฅูู ุงูุฃูุงู.",
    "character_consistency": "float // ูุฏู ุงุชุณุงู ุชุตุฑูุงุช ูุฃููุงู ุงูุดุฎุตูุงุช ูุน ูููุงุชูุง ุงููุนุฑููุฉ."
  }},
  "strengths": [
    "string // ููุทุฉ ููุฉ ูุงุถุญุฉ ููุญุฏุฏุฉ.",
    "string // ููุทุฉ ููุฉ ุฃุฎุฑู."
  ],
  "issues": [
    "string // ูุดููุฉ ูุงุจูุฉ ููุชูููุฐ (ูุซุงู: 'ุงูุญูุงุฑ ูุจุฏู ุฌุงููุงุ ุญุงูู ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงููุดุงุนุฑ').",
    "string // ูุดููุฉ ุฃุฎุฑู."
  ],
  "overall_score": "float // ุงููุชูุณุท ุงููุญุณูุจ ููุฏุฑุฌุงุช ูู 'scores'."
}}
"""

# --- ูุณู ุงูุงุฎุชุจุงุฑ ุงููุญุฏูุซ ---
async def main_test():
    import os
    from dotenv import load_dotenv

    load_dotenv()
    if not os.getenv("GEMINI_API_KEY"):
        print("โ ุฎุทุฃ: ูุชุบูุฑ ุงูุจูุฆุฉ GEMINI_API_KEY ุบูุฑ ููุฌูุฏ.")
        return

    critic_agent = LiteraryCriticAgent()
    
    # --- 1. ุงุฎุชุจุงุฑ ููุฏ ููุฑุฉ ---
    print("\n--- ๐งช TEST 1: Critiquing a story idea ---")
    bad_idea = {"premise": "ุฑุฌู ููุชุดู ุณุฑุง."}
    critique_result = critic_agent.review_idea(bad_idea)
    print(f"Critique for a weak idea: {critique_result}")
    assert critique_result['overall_score'] < 8.0

    good_idea = {"premise": "ูู ุนุงูู ุตุญุฑุงููุ ุชูุชุดู ููุธูุฉ ุณุฑูุฉ ุฃู ุงููุงุก ููุณ ุนูุตุฑุงู ุทุจูุนูุงู ุจู ูู ุฏู ูุงุฆู ูุถุงุฆู ูุฏููุ ููุทุงุฑุฏูู ุขุฎุฑ ุดุฎุต ูุนุฑู ุงูุญูููุฉ."}
    critique_result = critic_agent.review_idea(good_idea)
    print(f"Critique for a strong idea: {critique_result}")
    assert critique_result['overall_score'] >= 8.0

    # --- 2. ุงุฎุชุจุงุฑ ููุฏ ูุตู ูุงูู (ุจุงุณุชุฎุฏุงู LLM) ---
    print("\n--- ๐งช TEST 2: Critiquing a full chapter via LLM ---")
    sample_chapter_content = {
        "title": "ุงููุตู 1: ุงูุฑุณุงูุฉ ุงูุบุงูุถุฉ",
        "chapter_content": "ุชุญุช ุณูุงุก ุงููุงูุฑุฉ ุงูุฑูุงุฏูุฉุ ููู ุนูู ูุฑุงูุจ ุงููุงุฑุฉ. ูู ููู ูุดุนุฑ ุจุจุฑูุฏุฉ ุงูููุงุก ุจูุฏุฑ ูุง ูุงู ูุดุนุฑ ุจุจุฑูุฏุฉ ุฑูุญู ุงููุงุฑุบุฉ. ุฑุงุฆุญุฉ ุงูุดูุงุก ุงูููุจุนุซุฉ ูู ูุทุนู ูุฑูุจ ูู ุชุนุฏ ุชุซูุฑ ุดููุชูุ ุจู ุฐูุฑุชู ููุท ุจููุงุฆุฏ ุงูุทุนุงู ุงูุฏุงูุฆุฉ ุงูุชู ุชุฑููุง ุฎููู. ุฃูุณู ุจุงูุฑุณุงูุฉ ุงููุฏููุฉ ูู ุฌูุจูุ ูููุณูุง ุงูุฎุดู ูุงู ุจูุซุงุจุฉ ูุฑุณุงุฉ ุชุฑุจุทู ุจุนุงูู ููุงุฏ ููุณุงู. ูุงูุช ุบุฑุจุชู ุตุญุฑุงุก ูุง ุชูุชููุ ููุงูุช ูุฐู ุงูุฑุณุงูุฉ ุจุฆุฑ ุงููุงุก ุงููุญูุฏ ูู ุฃููู.",
        "emotional_focus": "ุงูุบุฑุจุฉ"
    }

    try:
        chapter_critique = await critic_agent.review_chapter(sample_chapter_content)
        print("โ LLM-based critique successful!")
        print(json.dumps(chapter_critique, indent=2, ensure_ascii=False))
        assert "overall_score" in chapter_critique
        assert "issues" in chapter_critique
    except Exception as e:
        print(f"โ LLM-based critique failed: {e}")

if __name__ == "__main__":
    # ูุฐุง ุงูููุฏ ุงูุขู ูุชุทูุจ ุชุนุฑูู ุงููุฆุฉ ุงูุฃุณุงุณูุฉ BaseAgent ุจุดูู ุตุญูุญ
    # ุณููุชุฑุถ ุฃู `agents/base_agent.py` ููุฌูุฏ ููุนูู
    asyncio.run(main_test())
