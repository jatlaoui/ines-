# tools/professional_exporter.py (أداة جديدة)
import logging
from typing import Dict, Any

logger = logging.getLogger("ProfessionalExporter")

class ProfessionalExporter:
    """
    أداة متخصصة لتحويل النصوص الخام إلى صيغ احترافية
    مثل صيغة السيناريو القياسية.
    """
    def __init__(self):
        logger.info("✅ Professional Exporter Initialized.")

    def to_standard_script_format(self, raw_script: str) -> str:
        """
        (محاكاة) يحول نصًا مسرحيًا خامًا إلى صيغة سيناريو احترافية.
        """
        logger.info("Converting raw text to standard script format...")
        
        # في نظام حقيقي، سيتم استخدام منطق معقد لتحليل النص وتنسيقه
        # هنا سنقوم بتبديل بسيط للتوضيح
        
        # مثال: تحويل "علي: مرحبا" إلى الصيغة الصحيحة
        # وتحويل "(يدخل وهو يضحك)" إلى السطر الصحيح
        
        formatted_script = ""
        lines = raw_script.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                formatted_script += "\n"
                continue

            # تحديد رؤوس المشاهد
            if line.upper().startswith("مشهد") or line.upper().startswith("[خارجي") or line.upper().startswith("[داخلي"):
                formatted_script += f"{line.upper()}\n\n"
            # تحديد اسم الشخصية
            elif line.endswith(':'):
                character_name = line[:-1].strip().upper()
                formatted_script += f"    {character_name}\n"
            # تحديد التوجيهات
            elif line.startswith('(') and line.endswith(')'):
                action = line[1:-1].strip()
                formatted_script += f"    ({action})\n"
            # تحديد الحوار
            else:
                formatted_script += f"        {line}\n"
        
        return formatted_script.strip()

# إنشاء مثيل وحيد
professional_exporter = ProfessionalExporter()
```**شرح:** هذه الأداة هي "المنسق النهائي". هي تأخذ المخرجات الإبداعية من النظام وتحولها إلى منتج احترافي جاهز للمرحلة التالية من الإنتاج.

---
#### **2. ترقية الوكلاء الحاليين لدعم "السيناريو الحي"**

##### **تحديث `agents/lore_master_agent.py`:**
سيتم تطوير هذا الوكيل ليصبح قادرًا على إنتاج "حزمة الإنتاج" و"شهادة الأصالة الثقافية".

```python
# في ملف agents/lore_master_agent.py

class LoreMasterAgent(BaseAgent):
    # ... (الدوال الحالية) ...

    async def generate_production_bible(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        [جديد] يولد "حزمة إنتاج" متكاملة للمشروع.
        """
        execution = context.get("execution")
        if not execution: return {"status": "error", "message": "Execution object is required."}
        
        logger.info("LoreMaster: Generating Production Bible...")
        story_data = self._extract_data_from_execution(execution) # استخدام نفس دالة استخلاص البيانات
        
        # بناء المحتوى بصيغة مناسبة للـ PDF
        bible_content = {
            "cover_page": {"title": story_data["project_title"], "author": "Generated by INES System"},
            "logline_synopsis": {"logline": "ملخص من جملة واحدة...", "synopsis": "ملخص من فقرة..."},
            "character_list": [{"name": c["name"], "description": c["psych_profile"], "scene_count": 5} for c in story_data["character_profiles"]],
            "location_list": [{"name": "المقهى"}, {"name": "منزل مبروك"}], # يتم استخلاصها
        }
        return {"status": "success", "content": {"production_bible": bible_content}}

    async def generate_cultural_certificate(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        [جديد] يولد "شهادة الأصالة الثقافية".
        """
        execution = context.get("execution")
        if not execution: return {"status": "error", "message": "Execution object is required."}

        logger.info("LoreMaster: Generating Cultural Authenticity Certificate...")
        story_data = self._extract_data_from_execution(execution)
        
        # استدعاء LLM لتوليد النصوص التحليلية للشهادة
        prompt = f"""
مهمتك: أنت ناقد ثقافي وأكاديمي. بناءً على بيانات القصة التالية، اكتب نصًا رسميًا لـ "شهادة أصالة ثقافية".
- **المواضيع والقيم:** {str(story_data['themes_and_symbols'])}
- **العناصر التراثية:** (اذكر الأمثال والعادات التي تم استخدامها)

**المطلوب:**
1.  ملخص للقيم التونسية التي يعالجها العمل.
2.  قائمة بالعناصر التراثية المدمجة.
3.  فقرة تشرح كيف يساهم العمل في إثراء المشهد الثقافي التونسي.
"""
        certificate_text = await llm_service.generate_text_response(prompt)
        
        return {"status": "success", "content": {"cultural_certificate": certificate_text}}

    async def process_task(self, context: Dict[str, Any], **kwargs) -> Dict[str, Any]:
        task_type = context.get("task_type", "generate_story_bible")
        if task_type == "generate_production_bible":
            return await self.generate_production_bible(context)
        elif task_type == "generate_cultural_certificate":
            return await self.generate_cultural_certificate(context)
        else:
            return await super().process_task(context, **kwargs)
