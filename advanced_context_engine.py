# engines/advanced_context_engine.py (ุงููุณุฎุฉ ุงูููุนููุฉ)

import asyncio
import json
import logging
import uuid
from typing import List, Dict, Any, Optional, Type

from pydantic import BaseModel, Field, ValidationError

# --- ุงุณุชูุฑุงุฏ ุงูุฎุฏูุฉ ุงูุญููููุฉ ---
from core.llm_service import llm_service

# --- ุฅุนุฏุงุฏุงุช ุงูุชุณุฌูู ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - [ContextEngine] - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- ููุงุฐุฌ Pydantic (ุชุจูู ููุง ูู) ---
class EntityContext(BaseModel):
    role_in_text: str = Field(..., description="ุฏูุฑ ุงูููุงู ูู ุงูุณุฑุฏ (ุจุทูุ ููุงู ุฑุฆูุณูุ ุฑูุฒุ ุฅูุฎ).")
    cultural_significance: Optional[str] = Field(None, description="ุงูุฃูููุฉ ุงูุซูุงููุฉ ุฃู ุงูุชุฑุงุซูุฉ ููููุงู.")
    historical_period: Optional[str] = Field(None, description="ุงููุชุฑุฉ ุงูุชุงุฑูุฎูุฉ ุงููุฑุชุจุทุฉ ุจุงูููุงู ุฅู ูุฌุฏุช.")

class Entity(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str = Field(..., description="ุงุณู ุงูููุงู.")
    type: str = Field(..., description="ููุน ุงูููุงู (ุดุฎุตูุฉุ ููุงูุ ุดูุกุ ููููู ูุฌุฑุฏ).")
    description: str = Field(..., description="ูุตู ููุฌุฒ ููููุงู ูุฏูุฑู.")
    importance_score: float = Field(..., ge=0.0, le=10.0, description="ุชูููู ูุฃูููุฉ ุงูููุงู ูู ุงูุณุฑุฏ (0-10).")
    context: EntityContext

class EntityList(BaseModel):
    entities: List[Entity]

class Relationship(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    source: str = Field(..., description="ุงุณู ุงูููุงู ุงููุตุฏุฑ ููุนูุงูุฉ.")
    target: str = Field(..., description="ุงุณู ุงูููุงู ุงููุฏู ููุนูุงูุฉ.")
    relation: str = Field(..., description="ูุตู ุทุจูุนุฉ ุงูุนูุงูุฉ (ูุซุงู: 'ูุญุจ'ุ 'ููุฑู'ุ 'ูุคุฏู ุฅูู'ุ 'ูุณุงุนุฏ').")
    context: Optional[str] = Field(None, description="ุงูุณูุงู ุงูุฐู ุชุธูุฑ ููู ุงูุนูุงูุฉ.")

class RelationshipList(BaseModel):
    relationships: List[Relationship]

class EmotionalArcPoint(BaseModel):
    timestamp: int = Field(..., description="ููุถุน ูุณุจู ูู ุงููุต (0-100) ุญูุซ ูุญุฏุซ ุงูุชุญูู ุงูุนุงุทูู.")
    emotion: str = Field(..., description="ุงูุนุงุทูุฉ ุงูุณุงุฆุฏุฉ ูู ูุฐู ุงูููุทุฉ (ูุซุงู: ุฃููุ ูุฃุณุ ุบุถุจ).")
    intensity: float = Field(..., ge=0.0, le=1.0, description="ุดุฏุฉ ุงูุนุงุทูุฉ (0.0 ุฅูู 1.0).")
    reasoning: Optional[str] = Field(None, description="ุงูุณุจุจ ุฃู ุงูุญุฏุซ ุงูุฐู ุฃุฏู ุฅูู ูุฐู ุงูุนุงุทูุฉ.")

class EmotionalArc(BaseModel):
    emotional_arc_points: List[EmotionalArcPoint]

class KnowledgeBase(BaseModel):
    entities: List[Entity]
    relationship_graph: List[Relationship]
    emotional_arc: List[EmotionalArcPoint]
    historical_context: Dict[str, Any]

# --- ุงููุญุฑู ุงููุชูุฏู (ููุญุฏููุซ) ---
class AdvancedContextEngine:
    """
    ูุจูู ูุงุนุฏุฉ ูุนุฑูุฉ ุบููุฉ ููุชุฑุงุจุทุฉ ูู ุงููุตูุต ุนุจุฑ ุงุณุชุฏุนุงุกุงุช ูุชุฎุตุตุฉ ูู LLM.
    """
    def __init__(self):
        # ูู ูุนุฏ ุจุญุงุฌุฉ ูุฎุฏูุงุช ููููุฉ ููุง
        logger.info("โ AdvancedContextEngine initialized and connected to the live LLM service.")

    async def analyze_text(self, text: str) -> KnowledgeBase:
        """
        ุงููุธููุฉ ุงูุฑุฆูุณูุฉ ููุชุญููู. ุชููู ุจุชุดุบูู ุฌููุน ููุงู ุงูุชุญููู ุจุงูุชูุงุฒู.
        """
        logger.info(f"๐ Starting comprehensive analysis for text (length: {len(text)})...")
        
        # ุงุณุชุฏุนุงุก ุฌููุน ุฏูุงู ุงูุชุญููู ุจุงูุชูุงุฒู ูุชุญููู ุฃูุตู ุณุฑุนุฉ
        analysis_tasks = [
            self._extract_advanced_entities(text),
            self._analyze_events_with_causality(text),
            self._analyze_characters_psychological(text),
            self._analyze_emotional_arc(text)
        ]
        
        entities_list, event_rels, char_rels, emo_arc = await asyncio.gather(*analysis_tasks)
        
        # ุชุฌููุน ุงููุชุงุฆุฌ
        all_rels = (event_rels.relationships if event_rels else []) + (char_rels.relationships if char_rels else [])
        
        # ูุญุงูุงุฉ ูุฅุซุฑุงุก ุงูุณูุงู ุงูุชุงุฑูุฎู (ูููู ุชูุนููู ูุงุญููุง)
        hist_ctx = {}

        kb = KnowledgeBase(
            entities=entities_list.entities if entities_list else [],
            relationship_graph=all_rels,
            emotional_arc=emo_arc.emotional_arc_points if emo_arc else [],
            historical_context=hist_ctx
        )
        logger.info(f"โ Analysis complete. KnowledgeBase created with {len(kb.entities)} entities and {len(kb.relationship_graph)} relationships.")
        return kb

    async def _process_llm_json_response(self, prompt: str, pydantic_model: Type[BaseModel]) -> Optional[BaseModel]:
        """
        ุฏุงูุฉ ูุณุงุนุฏุฉ ููุญุฏุฉ ูุงุณุชุฏุนุงุก ุงูู LLMุ ุชุญููู ุงูู JSONุ ูุงูุชุญูู ูู ุตุญุชู ุจุงุณุชุฎุฏุงู Pydantic.
        """
        response_json = await llm_service.generate_json_response(prompt)

        if "error" in response_json:
            logger.error(f"LLM call failed: {response_json.get('details')}")
            return None # ุฅุฑุฌุงุน None ูู ุญุงูุฉ ูุดู ุงุณุชุฏุนุงุก ุงูู LLM
        
        try:
            # ุงุณุชุฎุฏุงู Pydantic ูุชุญููู ูุชุญูู ูู ุตุญุฉ ุจููุฉ ุงูู JSON
            validated_data = pydantic_model.parse_obj(response_json)
            logger.info(f"Successfully parsed and validated response for {pydantic_model.__name__}.")
            return validated_data
        except ValidationError as e:
            logger.error(f"Pydantic validation failed for {pydantic_model.__name__}: {e}")
            logger.error(f"Invalid JSON received: {response_json}")
            return None # ุฅุฑุฌุงุน None ูู ุญุงูุฉ ูุดู ุงูุชุญูู

    def _build_prompt_for_model(self, task_description: str, json_schema: Dict, text: str) -> str:
        """ุฏุงูุฉ ูุณุงุนุฏุฉ ูุจูุงุก ุงูู Prompts ุจุดูู ููุญุฏ."""
        return f"""
ูููุชู: ุฃูุช ูุญูู ุณุฑุฏู ุฎุจูุฑ. ูู ุจุชุญููู ุงููุต ุงูุชุงูู ุจุฏูุฉ.
**ูุตู ุงููููุฉ:** {task_description}

**ุงููุต ููุชุญููู:**
---
{text}
---

ุฃุฑุฌุน ุฑุฏู **ุญุตุฑููุง** ุจุชูุณูู JSON ุตุงูุญ ูุชุจุน ุงููุฎุทุท ุงูุชุงูู ุชูุงููุง. ูุง ุชูู ุจุฅุถุงูุฉ ุฃู ูุต ุฃู ุชุนูููุงุช ุฎุงุฑุฌ ูุงุฆู ุงูู JSON.
**ูุฎุทุท JSON ุงููุทููุจ (Schema):**
{json.dumps(json_schema, indent=2, ensure_ascii=False)}
"""

    async def _extract_advanced_entities(self, text: str) -> Optional[EntityList]:
        prompt = self._build_prompt_for_model(
            task_description="ุงุณุชุฎุฑุฌ ุฌููุน ุงูููุงูุงุช (ุดุฎุตูุงุชุ ุฃูุงููุ ููุงูููุ ุฃุดูุงุก) ูู ุงููุต. ุญุฏุฏ ุฏูุฑ ูู ููุงู ูููู ุฃูููุชู ูู ุงูุณุฑุฏ.",
            json_schema=EntityList.schema(),
            text=text
        )
        return await self._process_llm_json_response(prompt, EntityList)

    async def _analyze_events_with_causality(self, text: str) -> Optional[RelationshipList]:
        prompt = self._build_prompt_for_model(
            task_description="ุญูู ุงูุนูุงูุงุช ุงูุณุจุจูุฉ ุจูู ุงูุฃุญุฏุงุซ ุงูุฑุฆูุณูุฉ ูู ุงููุต. ุญุฏุฏ ูุง ูู ุงูุญุฏุซ ุงูุฐู ูุคุฏู ุฅูู ุญุฏุซ ุขุฎุฑ.",
            json_schema=RelationshipList.schema(),
            text=text
        )
        return await self._process_llm_json_response(prompt, RelationshipList)

    async def _analyze_characters_psychological(self, text: str) -> Optional[RelationshipList]:
        prompt = self._build_prompt_for_model(
            task_description="ุญูู ุงูุนูุงูุงุช ุงูููุณูุฉ ูุงูุฏูุงูุน ุงูุฏุงุฎููุฉ ููุดุฎุตูุงุช. ุตู ุนูุงูุงุช ุงูุญุจุ ุงููุฑุงููุฉุ ุงูุตุฏุงูุฉุ ูุงูุทููุญ.",
            json_schema=RelationshipList.schema(),
            text=text
        )
        return await self._process_llm_json_response(prompt, RelationshipList)

    async def _analyze_emotional_arc(self, text: str) -> Optional[EmotionalArc]:
        prompt = self._build_prompt_for_model(
            task_description="ุงุฑุณู ุงูููุณ ุงูุนุงุทูู ููุณุฑุฏ. ุญุฏุฏ ููุงุท ุงูุชุญูู ุงูุนุงุทูู ุงูุฑุฆูุณูุฉ (0-100)ุ ูููุน ุงูุนุงุทูุฉุ ูุดุฏุชูุง (0.0-1.0).",
            json_schema=EmotionalArc.schema(),
            text=text
        )
        return await self._process_llm_json_response(prompt, EmotionalArc)

# --- ูุณู ุงูุงุฎุชุจุงุฑ ุงููุญุฏูุซ ---
async def main_test():
    # ุชุฃูุฏ ูู ุฃู ูุชุบูุฑ ุงูุจูุฆุฉ GEMINI_API_KEY ูุนูู
    if not os.getenv("GEMINI_API_KEY"):
        print("โ ุฎุทุฃ: ูุชุบูุฑ ุงูุจูุฆุฉ GEMINI_API_KEY ุบูุฑ ููุฌูุฏ. ูุฑุฌู ุฅุถุงูุชู ูู ููู .env")
        return

    engine = AdvancedContextEngine()
    sample_text = """
    ูู ุฒูุงู ุถูู ูู ุฃุฒูุฉ ุงููุงูุฑุฉ ุงููุฏููุฉุ ูุฌุฏ ุนููุ ุงูุดุงุจ ุงูุญุงูู ุงูุฐู ููุฏ ุดุบููุ ุฑุณุงูุฉ ุบุงูุถุฉ ูู ุตูุฏูู ุฌุฏู ุงูุฎุดุจู.
    ุงูุฑุณุงูุฉุ ุงูุชู ูุชุจุชูุง ุฌุฏุชู ุงูุฑุงุญูุฉุ ุชุญุฏุซุช ุนู ููุฒ ููุณ ูู ุฐูุจุ ุจู ููุฒ ูู ุงูุญููุฉ ูุฏููู ุชุญุช ุดุฌุฑุฉ ุนุชููุฉ ูู ุณููุงุก.
    ุดุนุฑ ุนูู ุจูุฒูุฌ ูู ุงูุญููู ูุงููุถููุ ูุดุนูุฉ ุฃูู ุฎุงูุชุฉ ุจุฏุฃุช ุชุถูุก ุธููุฉ ุฑูุญู. 
    ูุงู ูุฐุง ุงูุงูุชุดุงู ูู ูุง ูุญุชุงุฌู ุชูุงููุง. ูุฑุงุฑ ุงูุจุญุซ ุนู ูุฐุง ุงูููุฒ ูู ููู ุณููุงูุ ููุฏ ูุงู ูุนูู ุชุฑู ุญูุงุชู ุงูุฑุชูุจุฉ ูููุงุฌูุฉ ุงููุฌููู.
    ููู ุฏุงูุนู ูุชุญููู ุฐุงุชู ูุงู ุฃููู ูู ุฎููู.
    """
    
    print(f"--- ๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุญุฑู ุงูุณูุงู ุงููุชูุฏู ูุน ูุต ุญูููู... ---")
    try:
        knowledge_base = await engine.analyze_text(sample_text)
        
        print("\n--- โ ุงูุชุญููู ุงูุชูู ุจูุฌุงุญ! ---")
        print("--- ูุงุนุฏุฉ ุงููุนุฑูุฉ (KnowledgeBase) ุงููุงุชุฌุฉ: ---")
        # ุทุจุงุนุฉ ุงููุชูุฌุฉ ุจุชูุณูู JSON ุฌููู
        print(knowledge_base.json(indent=2, ensure_ascii=False))

    except Exception as e:
        print(f"--- โ ูุดู ุงูุงุฎุชุจุงุฑ ---")
        logger.error(f"An error occurred during the test: {e}", exc_info=True)

if __name__ == "__main__":
    # ุชุดุบูู ุงูุงุฎุชุจุงุฑ
    asyncio.run(main_test())
