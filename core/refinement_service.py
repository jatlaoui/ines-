# core/refinement_service.py (ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑŸÖŸÅÿπŸëŸÑÿ© ŸàÿßŸÑŸÖÿ≠ÿ≥ŸÜÿ©)

import logging
from typing import Any, Callable, Dict, Optional, List, Awaitable

# ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ
logger = logging.getLogger("RefinementService")
# ŸÑÿß ÿ≠ÿßÿ¨ÿ© ŸÑŸÄ basicConfig ŸáŸÜÿß ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿπÿ±ŸäŸÅŸá ŸÅŸä ŸÜŸÇÿ∑ÿ© ÿßŸÜÿ∑ŸÑÿßŸÇ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ

class RefinementService:
    """
    ÿÆÿØŸÖÿ© ÿπÿßŸÖÿ© ŸÑÿ•ÿØÿßÿ±ÿ© ÿØŸàÿ±ÿ© ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿ™ŸÉÿ±ÿßÿ±Ÿäÿ© (Create -> Critique -> Refine).
    ÿ™ÿπŸÖŸÑ ŸÉÿ≠ŸÑŸÇÿ© ÿ™ÿ≠ŸÉŸÖ ŸÑÿ£Ÿä ÿπŸÖŸÑŸäÿ© ÿ™ÿ™ÿ∑ŸÑÿ® ÿ™ÿ≠ÿ≥ŸäŸÜŸãÿß ŸÖÿ™ŸÉÿ±ÿ±Ÿãÿß ŸÑŸÑÿ¨ŸàÿØÿ©.
    """
    def __init__(
        self,
        creator_fn: Callable[[Dict[str, Any], Optional[List[str]]], Awaitable[Dict[str, Any]]],
        critique_fn: Callable[[Dict[str, Any]], Awaitable[Dict[str, Any]]],
        quality_threshold: float = 8.0,
        max_refinement_cycles: int = 2
    ):
        """
        ÿ™ŸáŸäÿ¶ÿ© ÿÆÿØŸÖÿ© ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ.
        :param creator_fn: ÿØÿßŸÑÿ© ÿ∫Ÿäÿ± ŸÖÿ™ÿ≤ÿßŸÖŸÜÿ© ŸÑÿ™ŸàŸÑŸäÿØ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ (ÿ™ÿ£ÿÆÿ∞ ÿßŸÑÿ≥ŸäÿßŸÇ ÿßŸÑÿ£ŸàŸÑŸä ŸàŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿ©).
        :param critique_fn: ÿØÿßŸÑÿ© ÿ∫Ÿäÿ± ŸÖÿ™ÿ≤ÿßŸÖŸÜÿ© ŸÑŸÑŸÜŸÇÿØ (ÿ™ÿ£ÿÆÿ∞ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ∞Ÿä ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ§Ÿá).
        :param quality_threshold: ÿπÿ™ÿ®ÿ© ÿßŸÑÿ¨ŸàÿØÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ŸÑÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ.
        :param max_refinement_cycles: ÿ£ŸÇÿµŸâ ÿπÿØÿØ ŸÖŸÜ ÿØŸàÿ±ÿßÿ™ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ.
        """
        self.creator_fn = creator_fn
        self.critique_fn = critique_fn
        self.quality_threshold = quality_threshold
        self.max_refinement_cycles = max_refinement_cycles

    async def refine(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Ÿäÿ¥ÿ∫ŸëŸÑ ÿØŸàÿ±ÿ© ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ™ŸÉÿ±ÿßÿ±Ÿäÿ© ŸÑÿ£Ÿä ŸÉŸäÿßŸÜ ŸÇÿßÿ®ŸÑ ŸÑŸÑÿ•ŸÜÿ¥ÿßÿ° ŸàÿßŸÑŸÜŸÇÿØ.
        """
        logger.info(f"üöÄ [Refinement] Starting iterative process. Target score: {self.quality_threshold}, Max cycles: {self.max_refinement_cycles}")

        final_content = None
        feedback_for_next_cycle: Optional[List[str]] = None
        final_score = 0.0
        critique_report = {}
        
        # ÿßŸÑÿ≠ŸÑŸÇÿ© ÿ≥ÿ™ÿπŸÖŸÑ `max_refinement_cycles` + 1 ŸÖÿ±ÿ© (ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑÿ£ŸàŸÑŸâ + ÿØŸàÿ±ÿßÿ™ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ)
        for cycle in range(self.max_refinement_cycles + 1):
            logger.info(f"--- üîÑ Refinement Cycle {cycle + 1}/{self.max_refinement_cycles + 1} ---")

            # --- ÿßŸÑÿÆÿ∑Ÿàÿ© 1: ÿßŸÑÿ•ŸÜÿ¥ÿßÿ° ÿ£Ÿà ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ---
            logger.info("  Step 1: Generating content...")
            generation_result = await self.creator_fn(context, feedback_for_next_cycle)
            
            # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÜÿ¨ÿßÿ≠ ÿπŸÖŸÑŸäÿ© ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°
            if generation_result.get("status") != "success" or "content" not in generation_result:
                error_message = generation_result.get("message", "Content generation failed or returned an empty result.")
                logger.error(f"  ‚ùå Generation failed in cycle {cycle + 1}. Reason: {error_message}")
                # ÿ•ÿ±ÿ¨ÿßÿπ ÿÆÿ∑ÿ£ ŸÅŸàÿ±Ÿä ÿ•ÿ∞ÿß ŸÅÿ¥ŸÑÿ™ ÿπŸÖŸÑŸäÿ© ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°
                return {"status": "error", "message": error_message, "details": generation_result}

            current_content = generation_result["content"]
            final_content = current_content  # ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÜŸáÿßÿ¶Ÿä ŸÅŸä ŸÉŸÑ ÿØŸàÿ±ÿ© ŸÜÿßÿ¨ÿ≠ÿ©
            
            # --- ÿßŸÑÿÆÿ∑Ÿàÿ© 2: ÿßŸÑŸÜŸÇÿØ ŸàÿßŸÑÿ™ŸÇŸäŸäŸÖ ---
            logger.info("  Step 2: Critiquing generated content...")
            critique_result = await self.critique_fn(current_content)
            
            # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÜÿ¨ÿßÿ≠ ÿπŸÖŸÑŸäÿ© ÿßŸÑŸÜŸÇÿØ
            if "overall_score" not in critique_result or "issues" not in critique_result:
                logger.error(f"  ‚ùå Critique function returned invalid format: {critique_result}")
                # ŸäŸÖŸÉŸÜŸÜÿß ÿ•ŸÖÿß ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿπŸÖŸÑŸäÿ© ÿ£Ÿà ÿßŸÑÿßÿ≥ÿ™ŸÖÿ±ÿßÿ± ÿ®ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©
                break

            critique_report = critique_result
            current_score = critique_report.get("overall_score", 0.0)
            feedback_for_next_cycle = critique_report.get("issues")
            final_score = current_score

            logger.info(f"  üìä Critique Result: Score = {current_score:.2f}/10.0")
            if feedback_for_next_cycle:
                logger.info(f"  üìù Feedback for next cycle: {feedback_for_next_cycle}")

            # --- ÿßŸÑÿÆÿ∑Ÿàÿ© 3: ÿßÿ™ÿÆÿßÿ∞ ÿßŸÑŸÇÿ±ÿßÿ± ---
            if current_score >= self.quality_threshold:
                logger.info(f"  ‚úÖ Quality threshold met ({current_score:.2f} >= {self.quality_threshold}). Finalizing.")
                break
            
            # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÖÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ Ÿáÿ∞Ÿá ŸáŸä ÿßŸÑÿØŸàÿ±ÿ© ÿßŸÑÿ£ÿÆŸäÿ±ÿ©
            if cycle >= self.max_refinement_cycles:
                logger.warning(f"  ‚ö†Ô∏è Max refinement cycles ({self.max_refinement_cycles}) reached. Final score {current_score:.2f} is below threshold. Accepting current version.")
                break
            
            logger.info("  ‚è≥ Quality below threshold. Preparing for next refinement cycle...")

        final_result = {
            "status": "success",
            "final_content": final_content,
            "final_score": final_score,
            "final_critique": critique_report,
            "refinement_cycles_used": cycle + 1
        }

        logger.info(f"üèÅ [Refinement] Process finished. Final score: {final_score:.2f} after {cycle + 1} cycle(s).")
        return final_result
